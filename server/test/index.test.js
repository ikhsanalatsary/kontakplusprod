'use strict';

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

var _Faker = require('Faker');

var _Faker2 = _interopRequireDefault(_Faker);

var _titlegen = require('titlegen');

var _titlegen2 = _interopRequireDefault(_titlegen);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _contactsModel = require('../model/contacts.model.js');

var _contactsModel2 = _interopRequireDefault(_contactsModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var admin = require('../config/config').admin;
var expect = _chai2.default.expect;

_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect(_config2.default.getDbConnection());

describe('Routing', function () {
  var url = 'http://localhost:3000';
  var api = 'http://localhost:3000/api/contacts';
  var base64Str = (0, _btoa2.default)(admin.user + ':' + admin.password);
  var config = {
    authorization: {
      "Authorization": 'Basic ' + base64Str,
      "Accept": "application/json"
    },
    unauthorization: {
      "WWW-Authenticate": "Basic realm=Authorization Required"
    }
  };

  var generator = _titlegen2.default.create();
  generator.feed(['My Love', 'Soulmate', 'My Boss', 'My Partner', 'My Teacher', 'My Mentor', 'My Big Brother', 'My Mom', 'My Dad']);

  var gentype = _titlegen2.default.create();
  gentype.feed(['Mobile', 'Work', 'Home']);

  var etype = _titlegen2.default.create();
  etype.feed(['Personal', 'Work', 'Other']);

  var adrtype = _titlegen2.default.create();
  adrtype.feed(['Home', 'Work', 'Other']);

  var contactTitle = generator.next();
  var option = gentype.next();
  var option2 = etype.next();
  var option3 = adrtype.next();
  var contact = {
    name: _Faker2.default.Name.findName(),
    title: contactTitle,
    email: [{ option: option2, email: _Faker2.default.Internet.email() }, { option: option2, email: _Faker2.default.Internet.email() }],
    phone: [{ option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }, { option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }],
    address: [{ option: option3, address: _Faker2.default.Address.streetAddress() }, { option: option3, address: _Faker2.default.Address.streetAddress() }],
    company: _Faker2.default.Company.companyName(),
    favorite: false
  };

  describe("GET '/'", function () {
    it('should get status code 200 with no auth', function (done) {
      (0, _supertest2.default)(url).get('/').set('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8').expect(200, done);
    });
  });

  describe("GET '/api' that not actually route", function () {
    it('should get status 404', function (done) {
      (0, _supertest2.default)(url).get('/api').expect('Content-Type', 'text/html; charset=utf-8').expect(404, done);
    });

    describe("GET '/api/contacts'", function () {
      it('should get status 200 if Authorized and return Array-JSON', function (done) {
        (0, _supertest2.default)(api).get('/').set(config.authorization).expect('Content-Type', /json/).expect(200).end(function (err, res) {
          if (err) return done(err);
          expect(res.body).to.be.instanceof(Array);
          done();
        });
      });
    });

    describe("GET '/api/contacts/:id'", function () {
      it('should get status 200 if Authorized and return Object-json', function (done) {
        var newContact = new _contactsModel2.default(contact);
        var promise = newContact.save();
        promise.then(function (contact) {
          if (contact) {
            (0, _supertest2.default)(api).get('/' + contact.id).set(config.authorization).expect('Content-Type', /json/).expect(200).end(function (err, res) {
              if (err) return done(err);
              expect(res.body).to.be.an('object');
              expect(res.body).to.have.property('name');
              expect(res.body).to.have.property('title');
              expect(res.body).to.have.property('email');
              expect(res.body).to.have.property('phone');
              expect(res.body).to.have.property('address');
              expect(res.body).to.have.property('company');
              expect(res.body).to.have.property('_id').to.equal(contact.id);
              done();
            });
          }
        }).catch(function (err) {
          done(err);
        });
      });
    });
  });

  describe("POST '/api/contacts'", function () {
    it('should post and get response status 200', function (done) {
      var emailVal = [{ option: option2, email: _Faker2.default.Internet.email() }, { option: option2, email: _Faker2.default.Internet.email() }];

      var phoneVal = [{ option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }, { option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }];

      var addVal = [{ option: option3, address: _Faker2.default.Address.streetAddress() }, { option: option3, address: _Faker2.default.Address.streetAddress() }];

      var contact = {
        name: '"' + _Faker2.default.Name.findName() + ' post"',
        title: '"' + contactTitle + '"',
        email: JSON.stringify(emailVal),
        phone: JSON.stringify(phoneVal),
        address: JSON.stringify(phoneVal),
        company: '"' + _Faker2.default.Company.companyName() + '"'
      };

      (0, _supertest2.default)(api).post('/').set(config.authorization).send(contact).expect(200).end(function (err, res) {
        if (err) return done(err);
        expect(res.body).to.be.an('object');
        done();
      });
    });

    describe('upload image', function () {
      it('should get status 200 response', function (done) {
        var emailVal = [{ option: option2, email: _Faker2.default.Internet.email() }, { option: option2, email: _Faker2.default.Internet.email() }];

        var phoneVal = [{ option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }, { option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }];

        var addVal = [{ option: option3, address: _Faker2.default.Address.streetAddress() }, { option: option3, address: _Faker2.default.Address.streetAddress() }];

        (0, _supertest2.default)(api).post('/').set(config.authorization).field('Content-Type', 'multipart/form-data').field('name', JSON.stringify("Tes upload")).field('phone', JSON.stringify(phoneVal)).field('email', JSON.stringify(emailVal)).field('address', JSON.stringify(addVal)).attach('avatar', '/Users/adi/Desktop/Tesphoto.png').end(function (err, res) {
          if (err) return done(err);
          expect(res.status).to.equal(200);
          done();
        });
      });
    });
  });

  describe("PUT '/api/contacts/:id'", function () {
    it('should get status 200 if Authorized', function (done) {
      var emailVal = [{ option: option2, email: _Faker2.default.Internet.email() }, { option: option2, email: _Faker2.default.Internet.email() }];

      var phoneVal = [{ option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }, { option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }];

      var addVal = [{ option: option3, address: _Faker2.default.Address.streetAddress() }, { option: option3, address: _Faker2.default.Address.streetAddress() }];

      var contact = {
        name: '"' + _Faker2.default.Name.findName() + ' post"',
        title: '"' + contactTitle + '"',
        email: JSON.stringify(emailVal),
        phone: JSON.stringify(phoneVal),
        address: JSON.stringify(phoneVal),
        company: '"' + _Faker2.default.Company.companyName() + '"'
      };

      var newContact = new _contactsModel2.default(contact);
      var promise = newContact.save();
      promise.then(function (contact) {
        if (contact) {
          contact.name = JSON.stringify("Jhonny Depp put");
          contact.company = JSON.stringify("Hollywood");
          contact.title = JSON.stringify("Actress");
          (0, _supertest2.default)(api).put('/' + contact.id).set(config.authorization).send(contact).expect('Content-Type', /json/).expect(200).end(function (err, res) {
            if (err) return done(err);
            expect(res.body).to.be.an('object');
            expect(res.body).to.have.property('name').to.equal('Jhonny Depp put');
            expect(res.body).to.have.property('title');
            expect(res.body).to.have.property('email');
            expect(res.body).to.have.property('phone');
            expect(res.body).to.have.property('address');
            expect(res.body).to.have.property('company');
            expect(res.body).to.have.property('_id').to.equal(contact.id);
            done();
          });
        }
      }).catch(function (err) {
        done(err);
      });
    });
  });

  describe("PATCH '/api/contacts/:id'", function () {
    it('should get status 200 if Authorized', function (done) {
      var newContact = new _contactsModel2.default(contact);
      var promise = newContact.save();
      promise.then(function (contact) {
        if (contact) {
          contact.favorite = true;
          contact.name = 'patch';
          (0, _supertest2.default)(api).patch('/' + contact.id).set(config.authorization).send(contact).expect(200).end(function (err, res) {
            if (err) return done(err);
            expect(res.body).to.be.an('object');
            expect(res.body).to.have.property('name').to.equal('patch');
            expect(res.body).to.have.property('favorite').to.equal(true);
            done();
          });
        }
      }).catch(function (err) {
        done(err);
      });
    });
  });

  describe("DELETE '/api/contacts/:id'", function () {
    var emailVal = [{ option: option2, email: _Faker2.default.Internet.email() }, { option: option2, email: _Faker2.default.Internet.email() }];

    var phoneVal = [{ option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }, { option: option, number: _Faker2.default.PhoneNumber.phoneNumber() }];

    var addVal = [{ option: option3, address: _Faker2.default.Address.streetAddress() }, { option: option3, address: _Faker2.default.Address.streetAddress() }];

    var contact = {
      name: '"' + _Faker2.default.Name.findName() + ' post"',
      title: '"' + contactTitle + '"',
      email: JSON.stringify(emailVal),
      phone: JSON.stringify(phoneVal),
      address: JSON.stringify(phoneVal),
      company: '"' + _Faker2.default.Company.companyName() + '"'
    };

    it('should get status 200 if Authorized', function (done) {
      var newContact = new _contactsModel2.default(contact);
      var promise = newContact.save();
      promise.then(function (contact) {
        if (contact) {
          (0, _supertest2.default)(api).delete('/' + contact.id).set(config.authorization).expect(200, done);
        }
      }).catch(function (err) {
        done(err);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,